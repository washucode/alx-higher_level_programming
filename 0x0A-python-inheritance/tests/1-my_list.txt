==================================
Tests for class MyList
==================================

Import:
-------
>>> MyList = __import__('1-my_list).MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

Checking if MyList inherits from list 
--------------------------------------
>>> isinstance(my_list, list)
True


Checking with elements: 
-----------------------
>>> my_list = MyList([3, 1, 2])
>>> print(my_list)
[3, 1, 2]


Checking None value
-------------------
>>> my_list = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

print_sorted: 
>>> my_list.append(None)
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: unorderable types: NoneType() < int()

Checking function print_sorted 
------------------------------
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

Checking with Strings: 
---------------------
>>> my_list = MyList()
>>> my_list.append("ok")
>>> my_list.append("hi")
>>> my_list.append("hello")
>>> my_list.print_sorted()
['hello', 'hi', 'ok']

Checking with mixed types:
--------------------------
>>> my_list = MyList([1, "hi", 5, "ok"])
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'str' and 'int'

Check if subclass
-----------------
>>> issubclass(list, MyList)
False
>>> issubclass(MyList, list)
True

Checking with elements negative
-----------------------------------
>>> my_list.append(-15)
>>> my_list.append(-6)
>>> print(my_list)
[1, 4, 2, 3, 5, -15, -6]
>>> my_list.print_sorted()
[-15,-6, 1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5, -15, -6]

Checking when all elements in the list are the same
----------------------------------------------------
>>> my_list.clear()
>>> my_list.append(1)
>>> my_list.append(1)
>>> my_list.append(1)
>>> my_list.append(1)
>>> my_list.append(1)
>>> print(my_list)
[1, 1, 1, 1, 1]
>>> my_list.print_sorted()
[1, 1, 1, 1, 1]
>>> print(my_list)
[1, 1, 1, 1, 1]

Check with empty list
---------------------
>>> my_list.clear()
>>> a = []
>>> my_list = MyList(a)
>>> print(my_list)
[]
>>> my_list.print_sorted()
[]
>>> print(my_list)
[]




